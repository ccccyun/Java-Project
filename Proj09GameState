import java.util.Random;

public class Proj09GameState {

 private static final int EMPTY = 0;
 private static final int ROBOT = 1;
 private static final int RUBBLE = 2;

 private static final int LENGTH = 30; // should be a even number here
 private static final int SQUARE_NUMBER = 20;

 private static final int HALF_LENGTH = LENGTH / 2;
 private static final int HALF_TILE_LENGTH = HALF_LENGTH - 1;
 private static final int TOTLE_SQUARES = SQUARE_NUMBER * SQUARE_NUMBER;

 private int[][] state;

 private int playerX;
 private int playerY;

 private boolean isGameOver;


 /****************************************************************************
  ***************************** required methods *****************************
  ****************************************************************************/

 // The init() method initializes the object. You should create storage for the
 // board, place the player in a good starting position, and initialize any other
 // variables you may have added. Do not place any robots on the board yet.
 // I have not taught the class about constructors yet, but if you know about
 // them, it's OK to do all of this work in the constructor, and to make init() a
 // NOP.
 // This method should not do any drawing.
 public void init() {
  StdDraw.setScale(-HALF_LENGTH, SQUARE_NUMBER * LENGTH - HALF_LENGTH);

  state = new int[SQUARE_NUMBER][SQUARE_NUMBER];
  playerX = SQUARE_NUMBER / 2;
  playerY = SQUARE_NUMBER / 2;
  isGameOver = false;
 }

 // The addRobots(int) method adds robots (the parameter tells you how many)
 // to the board. Make sure that you don't add two robots in the same location;
 // also don't add them at the same location as the player. (It's OK to have robots
 // right next to the player, though.)
 // Make sure that your method adds as many robots as the parameter calls for;
 // although you know that main() will only ask for 10 robots, use the parameter
 // to control your loop. That way, if we change main(), your method will still do
 // the right thing.
 // This method should not do any drawing.
 public void addRobots(int num) {
  for (int i = 0; i < num; i++) {
   addRobot();
  }
 }

 // This method should draw the current state of the game to the screen. Draw
 // some sort of grid; draw the robots; draw any rubble that exists; draw the player.
 // The pictures that you use for the player, robots, and rubble can be quite
 // trivial (as you have seen from my example solution). If you want to make your
 // program look like my example, that's OK. But you are encouraged to use your
 // creativity, and make the pictures better.
 // You should use StdDraw.show(int) to show the board to the screen. It's
 // OK if the  rst time you draw the screen, it appears slowly; however, it must
 // redraw quickly after that.
 public void draw() {
  StdDraw.clear();

  for (int i = 0; i < SQUARE_NUMBER; i++) {
   for (int j = 0; j < SQUARE_NUMBER; j++) {
    double centerX = getCenterCoor(i);
    double centerY = getCenterCoor(j);

    drawTile(centerX, centerY);

    if (state[i][j] == ROBOT) {
     drawRobot(centerX, centerY);
    } else if (state[i][j] == RUBBLE) {
     drawRubble(centerX, centerY);
    }
   }
  }

  drawPlayer(getCenterCoor(playerX), getCenterCoor(playerY));
 }

 // This method returns true if the game is over, false if not.
 public boolean isGameOver() {
  return isGameOver;
 }

 // This method will move all of the robots toward the player. If two robots crash,
 // they will be replaced with rubble; if a robot crashes into rubble, it will also be
 // removed (but the rubble will stay).
 // This method should update all of the robots, not just some of them (even
 // if one of them catches the player).
 // This method should not do any drawing.
 public void moveRobots() {
  int[][] stateDup = new int[SQUARE_NUMBER][SQUARE_NUMBER];

  // copy rubbles in state to stateDup
  for (int i = 0; i < SQUARE_NUMBER; i++) {
   for (int j = 0; j < SQUARE_NUMBER; j++) {
    if (state[i][j] == RUBBLE) {
     stateDup[i][j] = RUBBLE;
    }
   }
  }

  // update robots and rubbles
  for (int i = 0; i < SQUARE_NUMBER; i++) {
   for (int j = 0; j < SQUARE_NUMBER; j++) {
    if (state[i][j] == ROBOT) {
     int x = getRobotDirection(i, playerX) + i;
     int y = getRobotDirection(j, playerY) + j;

     if (state[x][y] == EMPTY) {
      stateDup[x][y] = ROBOT;
     } else if (state[x][y] == ROBOT) {
      stateDup[x][y] = RUBBLE;
     }

     if (isPlayer(x, y)) {
      isGameOver = true;
     }
    }
   }
  }

  state = stateDup;
 }

 // This method takes a single character which has just been typed on the keyboard
 // and checks to see if it is a valid move. If the key is recognized (and if the move
 // was possible), then update the player position and then return true. If the key
 // is not recognized, or if the move is impossible (because the player is against the
 // edge of the board), then return false.
 // You must support at least the following keys:
 //  w - Move up
 //  a - Move left
 //  s - Don't move, but let the robots move one step closer
 //  d - Move right
 //  x - Move down
 // Additional keys will also need to be supported if you want to earn all of the
 // points for this assignment.
 // The player may never move out of the board. So if the player is on the left
 // edge of the board and tries to move left, the move is ignored. Return false
 // (which means that the robots won't move, either).
 // I encourage you to add (limited) debug messages to the System.out. How-
 // ever, they are not required.
 // This method should not do any drawing.
 public boolean handleKeyTyped(char key) {
  boolean isValid = false;

  Direction dir = getDirection(key);
  if (dir != null) {
   int x = playerX + dir.getDirX();
   int y = playerY + dir.getDirY();

   if (isIndexValid(x) && isIndexValid(y)) {
    isValid = true;
    playerX = x;
    playerY = y;
   } else {
    System.out.println("Wrong Key Typed! Player is at (" + playerX + ", " + playerY + "), cannot move toward (" + x + ", " + y + ").");
   }
  } else {
   System.out.println("Wrong Key Typed! Key '" + key + "' is not valid!");
  }

  return isValid;
 }


 /****************************************************************************
  ***************************** private methods ******************************
  ****************************************************************************/
--- 旁邊是new final robot 有的

 private void addRobot() {
  boolean isValid = false;

  while (!isValid) {
   int randomX = getRandomIndex();
   int randomY = getRandomIndex();

   if (state[randomX][randomY] == EMPTY && !isPlayer(randomX, randomY)) {
    state[randomX][randomY] = ROBOT;
    isValid = true;
   }
  }
 }

 private boolean isPlayer(int x, int y) {
  return x == playerX && y == playerY;
 }

 // generate random number [0, SQUARE_NUMBER - 1]  
 private int getRandomIndex() {
  return new Random().nextInt(SQUARE_NUMBER);
 }

 private double getCenterCoor(int index) {
  return index * LENGTH;
 }

 private void drawTile(double centerX, double centerY) {
  StdDraw.setPenColor(200, 200, 200);
  StdDraw.filledSquare(centerX, centerY, HALF_TILE_LENGTH);
 }

 private void drawRobot(double centerX, double centerY) {
  // square
  StdDraw.setPenColor(0, 0, 255);
  StdDraw.filledSquare(centerX, centerY, HALF_TILE_LENGTH / 1.5);

  // rectangle
  StdDraw.setPenColor(0, 255, 255);
  StdDraw.filledRectangle(centerX, centerY, HALF_TILE_LENGTH / 3, HALF_TILE_LENGTH);

  // line
  double lineX1 = centerX + HALF_TILE_LENGTH;
  double lineY1 = centerY;
  double lineX2 = centerX - HALF_TILE_LENGTH;
  double lineY2 = centerY;
  StdDraw.setPenColor(0, 0, 0);
  StdDraw.line(lineX1, lineY1, lineX2, lineY2);
 }

 private void drawRubble(double centerX, double centerY) {
  // square
  StdDraw.setPenColor(255, 0, 0);
  StdDraw.filledSquare(centerX, centerY, HALF_TILE_LENGTH);

  // rectangle
  StdDraw.setPenColor(255, 255, 0);
  StdDraw.filledRectangle(centerX, centerY, HALF_TILE_LENGTH / 3, HALF_TILE_LENGTH / 1.5);

  // line 1
  double line1X1 = centerX + HALF_TILE_LENGTH;
  double line1Y1 = centerY - HALF_TILE_LENGTH;
  double line1X2 = centerX - HALF_TILE_LENGTH;
  double line1Y2 = centerY + HALF_TILE_LENGTH;
  StdDraw.setPenColor(0, 0, 0);
  StdDraw.line(line1X1, line1Y1, line1X2, line1Y2);

  // line 2
  double line2X1 = centerX + HALF_TILE_LENGTH;
  double line2Y1 = centerY + HALF_TILE_LENGTH;
  double line2X2 = centerX - HALF_TILE_LENGTH;
  double line2Y2 = centerY - HALF_TILE_LENGTH;
  StdDraw.setPenColor(0, 0, 0);
  StdDraw.line(line2X1, line2Y1, line2X2, line2Y2);
 }

 private void drawPlayer(double centerX, double centerY) {
  // head - square
  double headWidth = HALF_TILE_LENGTH;
  double headCenterX = centerX;
  double headCenterY = centerY + headWidth / 2.0;
  StdDraw.setPenColor(0, 255, 0);
  StdDraw.filledSquare(headCenterX, headCenterY, headWidth / 2);

  // body - rectangle
  double bodyWidth = headWidth / 2;
  double bodyHeight = HALF_TILE_LENGTH;
  double bodyCenterX = centerX;
  double bodyCenterY = centerY - headWidth / 2;
  StdDraw.setPenColor(0, 128, 128);
  StdDraw.filledRectangle(bodyCenterX, bodyCenterY, bodyWidth / 2, bodyHeight / 2);

  // left hand - line
  double handLeftX1 = centerX - HALF_TILE_LENGTH / 2;
  double handLeftY1 = bodyCenterY;
  double handLeftX2 = bodyCenterX - bodyWidth / 2;
  double handLeftY2 = bodyCenterY;
  StdDraw.setPenColor(0, 0, 0);
  StdDraw.line(handLeftX1, handLeftY1, handLeftX2, handLeftY2);

  // right hand - line
  double handRightX1 = centerX + HALF_TILE_LENGTH / 2;
  double handRightY1 = bodyCenterY;
  double handRightX2 = bodyCenterX + bodyWidth / 2;
  double handRightY2 = bodyCenterY;
  StdDraw.setPenColor(0, 0, 0);
  StdDraw.line(handRightX1, handRightY1, handRightX2, handRightY2);
 }

 private boolean isIndexValid(int index) {
  return index >= 0 && index < SQUARE_NUMBER;
 }

 private int getRobotDirection(int robot, int player) {
  if (player > robot) {
   return 1;
  } else if (player == robot) {
   return 0;
  } else {
   return -1;
  }
 }

 private enum Direction {
  UL(-1, 1),  U(0, 1),  UR(1, 1), 
  L(-1, 0),   M(0, 0),  R(1, 0),
  DL(-1, -1), D(0, -1), DR(1, -1);

  private int x;
  private int y;

  Direction(int dirX, int dirY) {
   x = dirX;
   y = dirY;
  }

  public int getDirX() {
   return x;
  }
  public int getDirY() {
   return y;
  }
 }

 private Direction getDirection(char key) {
  Direction dir = null;

  switch (key) {
   case 'q': case 'Q': case '7':
    dir = Direction.UL;
    break;

   case 'w': case 'W': case '8':
    dir = Direction.U;
    break;

   case 'e': case 'E': case '9':
    dir = Direction.UR;
    break;

   case 'a': case 'A': case '4':
    dir = Direction.L;
    break;

   case 's': case 'S': case '5':
    dir = Direction.M;
    break;

   case 'd': case 'D': case '6':
    dir = Direction.R;
    break;

   case 'z': case 'Z': case '1':
    dir = Direction.DL;
    break;

   case 'x': case 'X': case '2':
    dir = Direction.D;
    break;

   case 'c': case 'C': case '3':
    dir = Direction.DR;
    break;

   default:
    break;
  }

  return dir;
 }

}

